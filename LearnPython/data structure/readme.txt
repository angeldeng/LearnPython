简介
数据结构基本上就是 – 可以将一些数据结合到一起的结构，换言之用于存储一组
相关的数据。

python 拥有 4 种内建数据结构 – 列表，元组(tuple)，字典和集合。
我们将看到如何它们，它们又是怎样使我们的编程生涯变的惬意~


列表
列表是一种用于保存有序元素集合的数据结构，即你可以在列表中存储元素序
列。
考虑一个购物清单，上面有你需要购买的物品列表，只不过你可能希望以行分隔
它们而到了 python 变成了逗号。
这样想来就容易理解列表了吧。
列表元素应该被封闭在方括号中，这样 python 才会明白你指定的是一个列表。
一但列表创建完毕，你可以对其元素进行添加，删除和搜索。
正因为可以执行添加和删除操作，我们将列表称作可变类型，即这种类型可以被
修改。


对象和类快速简介
尽管我一直推迟讨论对象和类，但现在需要对其进行少量的说明好让你更好的理
解列表。后面会在相应的章节深入研究类和对象。
列表是使用对象和类的一个例子。当我们为变量 i 赋值时，例如赋值 5，这相当
于创建一个 int 类(类型)的对象(实例)i。
事实上你可以阅读 help(int)的输出更好的理解它。
一个类同样可以拥有方法，即函数，而且它们只能应用于这个类。并且只有当你
拥有一个类的对象时才能使用这些功能。
例如，python 为列表类提供了一个 append 方法允许你将新的元素添加到列表尾。
举个例子，mylist.append(‘an item’)将字符串添加到列表 mylist 的尾部。注意要使
用点号访问对象的方法。


一个类还可以拥有字段，而字段只不过是专门应用于一个类的变量而已。当你拥
有对应类的对象时就能使用这些变量/名字了。
字段同样利用点号访问，例如 mylist.field

元组
元组用于保存各种各样的对象。它与列表很相似，但它缺少列表提供的大量功能。
列表的一个主要特点就象字符串一样，它是不可变类型，也就是说你不可以修改
元组。
元组通过一组以逗号分隔的元素定义，并以一个可选的小括号闭合。
元组通常用于这样的情形，一个语句或一个用户定义的函数能够安全的假设其使
用的一组值(即元组值)不会发生改变。

字典
字典就像通讯录，只要知道联系人的名字就能找到他的地址或详细信息。即我们
将键(名字)与值(相关信息)联系到一起。
注意键必须是唯一的，这就像如果两个人同名你就没法找到正确的信息了。
还有字典的键必须是不可变对象（比如字符串），但字典的值可以是可变或不可
变对象。基本上这意味着只能将简单的对象作为键。
字典中的键值对使用语法 d = {key1 :value1, key2: value2}指定。
其中键和值由分号分隔而所有的键值对用逗号分隔，并且它们被括在一对大括号
内。
记住字典中的键值对是无序的。如果你希望按照特定的顺序排列它们，你只能在
使用前自己排序。
而你实际使用的字典是 dict 类的对象/实例

关键字实参与字典
如果你已经在函数中使用过关键字实参，那么你也已经使用过字典了！
你可以这样理解 – 你在函数定义时的形参列表中指定了键值对，当你在函数中访
问这些变量的时候只不过是在访问一个字典
(在编译器设计的术语中这被称作符号表)

序列
列表，元组和字符串都是序列的例子，但到底序列是啥呢？为什么它对我们的意
义如此特别？
55 / 99
序列最主要的特点在于支持成员从属测试（即，表达式中的 in 和 not in 操作）和
索引操作。
其中索引操作允许我们直接地获取序列中的指定元素。
以上说到的三种序列类型 – lists，tuples，strings 还支持一种切片操作，允许我们
得到序列的一个切片，即序列的部分。

集合
集合是简单对象的无序集合，适合当更关心集合中的元素是否存在而不是它们的
顺序或是它们出现的次数的时候。
使用集合，你可以测试从属关系，是否一个集合是另一个集合的子集，或是寻找
两个集合的交集等等。